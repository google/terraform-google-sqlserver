# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Fetch Secret from Google Cloud Secret Manager
  hosts: localhost
  gather_facts: no
  vars:
    sql_secret_name: "{{ sql_secret_name }}"
    project_id: "{{ project_id }}"

  tasks:
    - name: Retrieve the sql password from the secret manager
      ansible.builtin.command: "gcloud secrets versions access latest --secret={{ sql_secret_name }} --project={{ project_id }}"
      register: sql_password
      changed_when: false
      no_log: true
    - name: Set the secrets as global facts
      ansible.builtin.set_fact:
        sql_password: "{{ sql_password.stdout }}"
        cacheable: no
      no_log: true

- name: Install SQL server software, Configure MSSQL server, move SQL files to data and localssd disks
  hosts: sql
  become: true
  vars:
    # Disable the returning of how many rows were affected by the ALTER DATABASE commands
    sql_script: >-
      SET NOCOUNT ON;
      USE master;
      ALTER DATABASE tempdb MODIFY FILE (NAME = tempdev, FILENAME = '{{ ssd_name }}/tempdb.mdf');
      ALTER DATABASE tempdb MODIFY FILE (NAME = templog, FILENAME = '{{ ssd_name }}/templog.ldf');
    sql_script_data: >-
      SET NOCOUNT ON;
      ALTER DATABASE model MODIFY FILE (NAME = modeldev, FILENAME = '/mnt/disks/mssql/data/model.mdf');
      ALTER DATABASE model MODIFY FILE (NAME = modellog, FILENAME = '/mnt/disks/mssql/data/modellog.ldf');
      ALTER DATABASE msdb MODIFY FILE (NAME = MSDBData, FILENAME = '/mnt/disks/mssql/data/msdbdata.mdf');
      ALTER DATABASE msdb MODIFY FILE (NAME = MSDBLog, FILENAME = '/mnt/disks/mssql/data/msdblog.ldf');
    sql_password: "{{ hostvars['localhost']['sql_password'] }}"
  tasks:
    - name: Print params
      ansible.builtin.debug:
        var: ssd_name
    - name: Install Repositories (Debian)
      vars:
        distribution_version: "{{ ansible_facts['distribution_version'] }}"
        distribution_codename: "{{ ansible_facts['distribution_release'] }}"
      block:
        - name: Add Microsoft Ubuntu repository key
          apt_key:
            url: https://packages.microsoft.com/keys/microsoft.asc
            state: present
        - name: Add Microsoft SQL Server repository
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64,arm64,armhf] https://packages.microsoft.com/ubuntu/{{ distribution_version }}/mssql-server-{{ mssql_version }} {{ distribution_codename }} main"
            state: present
            filename: mssql-server-{{ mssql_version }}
        - name: Add Microsoft Ubuntu repository
          ansible.builtin.apt_repository:
            repo: 'deb [arch=amd64,arm64,armhf] https://packages.microsoft.com/ubuntu/{{ distribution_version }}/prod {{ distribution_codename }} main'
            state: present
            filename: mssql-release
        - name: Update apt cache
          apt:
            update_cache: yes
      when: ansible_facts['distribution_file_variety'] == "Debian"
    - name: Install Repositories (SUSE)
      block:
        - name: Download the Microsoft repository
          zypper_repository:
            repo: 'https://packages.microsoft.com/config/sles/15/mssql-server-{{ mssql_version }}.repo'
            state: present
        - name: Add Microsoft SUSE repository
          zypper_repository:
            repo: 'https://packages.microsoft.com/config/sles/15/prod.repo'
            state: present
        - name: Refresh the repository
          command: sudo zypper --gpg-auto-import-keys refresh
        - name: Import the public repository GPG keys
          rpm_key:
            key: https://packages.microsoft.com/keys/microsoft.asc
            state: present
      when: ansible_facts['distribution_file_variety'] == "SUSE"
    - name: Install Repositories (Red Hat)
      block:
        - name: Add Microsoft RHEL repository
          yum_repository:
            name: mssql-server
            description: Microsoft SQL Server repository
            baseurl: https://packages.microsoft.com/yumrepos/mssql-server-{{ mssql_version }}-rhel{{ ansible_facts['distribution_major_version'] }}
            gpgcheck: yes
            gpgkey: https://packages.microsoft.com/keys/microsoft.asc
            enabled: yes
        - name: Add Microsoft RHEL repository
          yum_repository:
            name: mssql-release
            description: Microsoft repository
            baseurl: https://packages.microsoft.com/rhel/{{ ansible_facts['distribution_major_version'] }}/prod/
            gpgcheck: yes
            gpgkey: https://packages.microsoft.com/keys/microsoft.asc
            enabled: yes
      when: ansible_facts['distribution_file_variety'] == "RedHat"
    - name: Install SQL Server
      package:
        name: mssql-server
        state: present

    - name: Run mssql-conf setup
      command: sudo MSSQL_SA_PASSWORD={{ sql_password }}      MSSQL_PID={{ mssql_edition }}      /opt/mssql/bin/mssql-conf -n setup accept-eula

    - name: Install SQL Server Tools
      environment:
        ACCEPT_EULA: "Y"
      package:
        name:
          - mssql-tools18
        state: present

    - name: Install unixODBC developer package (Debian)
      environment:
        ACCEPT_EULA: "Y"
      package:
        name:
          - unixodbc-dev
        state: present
      when: ansible_facts['distribution_file_variety'] == "Debian"
    - name: Install unixODBC developer package (RedHat/SUSE)
      environment:
        ACCEPT_EULA: "Y"
      package:
        name:
          - unixODBC-devel
        state: present
      when: ansible_facts['distribution_file_variety'] == "RedHat" or ansible_facts['distribution_file_variety'] == "SUSE"

    - name: Move data files and log files to the data disk
      block:
      - name: Update Master Database Location
        command: "{{ item }}"
        with_items:
          - /opt/mssql/bin/mssql-conf set filelocation.masterdatafile /mnt/disks/mssql/data/master.mdf
          - /opt/mssql/bin/mssql-conf set filelocation.masterlogfile /mnt/disks/mssql/data/mastlog.ldf

      - name: Change the default data and log directory location
        command: "{{ item }}"
        with_items:
          - /opt/mssql/bin/mssql-conf set filelocation.defaultdatadir /mnt/disks/mssql/data/
          - /opt/mssql/bin/mssql-conf set filelocation.defaultlogdir /mnt/disks/mssql/data/
      - name: Move Master Database Files
        command: "{{ item }}"
        with_items:
          - mv /var/opt/mssql/data/master.mdf /mnt/disks/mssql/data/master.mdf
          - mv /var/opt/mssql/data/mastlog.ldf /mnt/disks/mssql/data/mastlog.ldf
      - name: Restart the SQL Server
        ansible.builtin.systemd_service:
          name: mssql-server
          state: restarted
      - name: Wait for 60 seconds to ensure SQL server restarted
        ansible.builtin.wait_for:
          timeout: 60

    - name: Update Model and MSDB Database Locations
      community.general.mssql_script:
        login_user: "sa"
        login_password: "{{ sql_password }}"
        login_host: "{{ ansible_host }}"
        script: |
          SET NOCOUNT ON;
          ALTER DATABASE model MODIFY FILE (NAME = modeldev, FILENAME = '/mnt/disks/mssql/data/model.mdf');
          ALTER DATABASE model MODIFY FILE (NAME = modellog, FILENAME = '/mnt/disks/mssql/data/modellog.ldf');
          ALTER DATABASE msdb MODIFY FILE (NAME = MSDBData, FILENAME = '/mnt/disks/mssql/data/msdbdata.mdf');
          ALTER DATABASE msdb MODIFY FILE (NAME = MSDBLog, FILENAME = '/mnt/disks/mssql/data/msdblog.ldf');

    - name: Move Model DB  Files
      command: "{{ item }}"
      with_items:
        - mv /var/opt/mssql/data/model.mdf /mnt/disks/mssql/data/
        - mv /var/opt/mssql/data/modellog.ldf /mnt/disks/mssql/data/

    - name: Move  MSDB Database Files
      command: "{{ item }}"
      with_items:
        - mv /var/opt/mssql/data/msdbdata.mdf /mnt/disks/mssql/data/
        - mv /var/opt/mssql/data/msdblog.ldf /mnt/disks/mssql/data/

    - name: Move tempdb to local SSD when it exits and verify the change
      block:
        - name: Move tempdb to the local SSD
          community.general.mssql_script:
            login_user: "sa"
            login_password: "{{ sql_password }}"
            login_host: "{{ ansible_host }}"
            script: |
              SET NOCOUNT ON;
              USE master;
              ALTER DATABASE tempdb MODIFY FILE (NAME = tempdev, FILENAME = '{{ ssd_name }}/tempdb.mdf');
              ALTER DATABASE tempdb MODIFY FILE (NAME = templog, FILENAME = '{{ ssd_name }}/templog.ldf');

        - name: Restart the SQL Server
          ansible.builtin.systemd_service:
            name: mssql-server
            state: restarted

    - name: Wait for 60 seconds to ensure SQL server restarted
      ansible.builtin.wait_for:
        timeout: 60
    - name: Create Check_DB
      community.general.mssql_script:
        login_user: "sa"
        login_password: "{{ sql_password }}"
        login_host: "{{ ansible_host }}"
        script: |
          USE MASTER;
          CREATE DATABASE [check_db];
          ALTER DATABASE [check_db] SET RECOVERY FULL;
          BACKUP DATABASE [check_db] TO DISK = N'/mnt/disks/mssql/data/check_db.bak';
    - name: Verify tempdb location
      shell: /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P '{{ sql_password }}' -Q "SELECT name, physical_name FROM sys.master_files WHERE database_id = DB_ID(N'tempdb');" -No
      register: tempdb_result
      failed_when: 'ssd_name | string not in tempdb_result.stdout'
      when: is_local_ssd == "true"

- when: is_ha == "true"
  import_playbook: ha.yml